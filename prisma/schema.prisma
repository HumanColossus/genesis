generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  username      String?   @unique
  enabled       Boolean   @default(false)
  level         Int       @default(1)
  age           Int       @default(0)
  from          String    @default("Nowhere ðŸ‡¦ðŸ‡¶")
  profileImg    String?
  category      String    @default("??")
  substack      String?
  twitter       String?
  personalSite  String?
  aboutMe       String?   @db.LongText()
  posts         Post[]    @relation("posts")
  featuredPost  Post?     @relation("featured")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  created   DateTime @default(now())
  heroImage String?
  content   String   @db.LongText()
  authorId  String
  author    User     @relation("posts", fields: [authorId], references: [id])
  featured  User     @relation("featured", fields: [id], references: [id])
  description String?
  // organization
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
